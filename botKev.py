import os
import logging
import discord
from discord.ext import commands
from dotenv import load_dotenv  # Adicionado para carregar .env
import google.generativeai as genai
import asyncio

# --- Configura√ß√£o Inicial de Logging ---
# Melhorar o formato para incluir o nome do m√≥dulo e linha, √∫til para depura√ß√£o
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(name)s - %(lineno)d - %(message)s')
logger = logging.getLogger('discord_bot')

# --- Carregamento de Vari√°veis de Ambiente ---
load_dotenv()

DISCORD_BOT_TOKEN = os.getenv('DISCORD_BOT_TOKEN')  # Use getenv para seguran√ßa
GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')  # Use getenv para seguran√ßa
BOT_OWNER_ID = int(os.getenv('BOT_OWNER_ID')) if os.getenv('BOT_OWNER_ID') else None

# --- Valida√ß√£o das Vari√°veis de Ambiente Essenciais ---
if not DISCORD_BOT_TOKEN:
    logger.error(
        "Erro FATAL: Vari√°vel de ambiente DISCORD_BOT_TOKEN n√£o encontrada. Certifique-se de que seu arquivo .env est√° configurado.")
    exit(1)

if not GEMINI_API_KEY:
    logger.error(
        "Erro FATAL: Vari√°vel de ambiente GEMINI_API_KEY n√£o encontrada. Certifique-se de que seu arquivo .env est√° configurado.")
    exit(1)

# --- Defini√ß√£o das Intents do Discord ---
# Recomenda-se Intents.default() e adicionar message_content explicitamente
intents = discord.Intents.default()
intents.message_content = True  # Necess√°rio para ler o conte√∫do das mensagens

# --- Inicializa√ß√£o do Bot (usando commands.Bot) ---
# commands.Bot √© prefer√≠vel para bots que usam comandos
bot = commands.Bot(command_prefix='!', intents=intents, owner_id=BOT_OWNER_ID)

# --- Configura√ß√£o da API do Google Gemini ---
try:
    genai.configure(api_key=GEMINI_API_KEY)
    logger.info("‚úÖ API do Google Gemini configurada com sucesso.")

    generation_config = {
        'candidate_count': 1,
        'temperature': 0.5,
        'max_output_tokens': 150,
    }

    # --- AQUI EST√Å A MUDAN√áA ESSENCIAL ---
    # Defina o NOME EXATO do modelo como uma string.
    # Ex: 'gemini-1.0-pro', 'gemini-1.0-pro-001', 'gemini-1.5-flash-latest', 'gemini-1.5-pro-latest'
    # Eu mantenho 'gemini-1.0-pro' como no seu √∫ltimo c√≥digo, mas ajuste se precisar de outro.
    GEMINI_MODEL_NAME_TO_USE = 'gemini-2.0-flash' # <--- VERIFIQUE E ATUALIZE ESTA LINHA!

    # Carrega o modelo Gemini UMA VEZ usando o nome da string
    gemini_model = genai.GenerativeModel(model_name=GEMINI_MODEL_NAME_TO_USE,
                                         generation_config=generation_config)
    logger.info(f"‚úÖ Modelo Gemini '{GEMINI_MODEL_NAME_TO_USE}' carregado.")
except Exception as e:
    # A linha 62 √© o 'except', mas o problema acontece na linha de cima se 'model_name' n√£o for string.
    logger.error(f"Erro FATAL: Falha ao configurar a API ou carregar o modelo Gemini. Detalhes: {e}")
    logger.error("Verifique se o nome do modelo est√° correto (√© uma string como 'gemini-1.0-pro') e se sua API Key √© v√°lida.")
    exit(1)

# Dicion√°rio para armazenar o hist√≥rico de chat por canal
# Isso permite que cada canal tenha sua pr√≥pria conversa cont√≠nua com o Gemini.
chat_sessions = {}  # {channel_id: gemini_chat_object}


# --- Eventos do Bot ---
@bot.event
async def on_ready():
    logger.info(f"ü•≥ Bot {bot.user.name} est√° online e conectado!")
    logger.info(f"Estou em {len(bot.guilds)} servidor(es)!")
    try:
        # Sincroniza comandos de barra.
        # Se voc√™ tiver comandos de barra, eles ser√£o registrados ou atualizados.
        synced = await bot.tree.sync()
        logger.info(f"‚úÖ Sincronizei {len(synced)} comando(s) de barra globalmente.")
    except Exception as e:
        logger.exception(f"‚ùå Falha ao sincronizar comandos de barra globalmente: {e}")


@bot.event
async def on_message(message: discord.Message):
    # Ignora mensagens de outros bots ou do pr√≥prio bot
    if message.author.bot:
        return

    # Processa comandos de prefixo (se voc√™ tiver algum)
    await bot.process_commands(message)

    # L√≥gica para quando o bot √© mencionado ou a mensagem √© um DM
    # Se a mensagem for um DM ou o bot for explicitamente mencionado
    if isinstance(message.channel, discord.DMChannel) or bot.user in message.mentions:
        async with message.channel.typing():  # Mostra que o bot est√° "digitando"
            user_message_content = message.content

            # Remove a men√ß√£o ao bot do conte√∫do da mensagem
            if bot.user in message.mentions:
                user_message_content = user_message_content.replace(f"<@{bot.user.id}>", "").strip()

            # Se a mensagem ficou vazia ap√≥s remover a men√ß√£o, ignora
            if not user_message_content:
                await message.reply("Ol√°! Como posso ajudar?")
                return

            # Obt√©m ou cria uma sess√£o de chat para o canal
            if message.channel.id not in chat_sessions:
                chat_sessions[message.channel.id] = gemini_model.start_chat(history=[])
                logger.info(f"Iniciada nova sess√£o de chat Gemini para o canal {message.channel.id}.")

            current_chat = chat_sessions[message.channel.id]

            try:
                logger.info(f"Perguntando ao Gemini (canal {message.channel.id}): '{user_message_content}'")

                # Envia a mensagem do usu√°rio para o chat Gemini
                # Usar asyncio.to_thread para chamadas s√≠ncronas da API Gemini para n√£o bloquear o bot
                response = await asyncio.to_thread(current_chat.send_message, user_message_content)

                # Acessa o texto da resposta
                gemini_response_text = response.text.strip()
                logger.info(f"ü§ñ Resposta do Gemini (canal {message.channel.id}): '{gemini_response_text}'")

                await message.reply(gemini_response_text)

            except genai.types.BlockedPromptException as e:
                logger.warning(f"A pergunta foi bloqueada pelo Gemini: {e}")
                await message.reply(
                    "‚ö†Ô∏è Sua pergunta foi bloqueada devido a pol√≠ticas de seguran√ßa ou conte√∫do. Por favor, tente reformular.")
            except Exception as e:
                logger.exception(f"Erro inesperado ao processar pergunta com Gemini no canal {message.channel.id}: {e}")
                await message.reply(
                    f"‚ùå Ocorreu um erro ao processar sua pergunta. Por favor, tente novamente. Detalhes: `{e}`")


# --- Comandos de Barra (Slash Commands) ---
# Se voc√™ quiser comandos de barra, voc√™ pode adicion√°-los aqui,
# similar ao seu c√≥digo anterior, dentro de uma Cog ou diretamente.
# Exemplo de comando de barra simples:
@bot.tree.command(name="reset_chat", description="Reseta a conversa com o Gemini neste canal.")
async def reset_chat(interaction: discord.Interaction):
    if interaction.channel_id in chat_sessions:
        del chat_sessions[interaction.channel_id]
        logger.info(f"Sess√£o de chat Gemini resetada para o canal {interaction.channel.id}.")
        await interaction.response.send_message("‚úÖ Conversa com o Gemini resetada para este canal!", ephemeral=True)
    else:
        await interaction.response.send_message("‚ÑπÔ∏è Nenhuma conversa ativa com o Gemini para resetar neste canal.",
                                                ephemeral=True)


# --- Execu√ß√£o Principal do Bot ---
if __name__ == "__main__":
    try:
        logger.info("Iniciando o loop de eventos do asyncio para o bot.")
        bot.run(DISCORD_BOT_TOKEN)
    except discord.LoginFailure:
        logger.error("Erro de login: Token do bot inv√°lido. Verifique o DISCORD_BOT_TOKEN no seu arquivo .env.")
    except KeyboardInterrupt:
        logger.info("Bot desligado manualmente via KeyboardInterrupt.")
    except Exception as e:
        logger.exception(f"Erro fatal durante a execu√ß√£o do bot: {e}")